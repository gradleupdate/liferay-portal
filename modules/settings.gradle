FileTree modulesFileTree

if (Boolean.getBoolean("portal.build")) {
	modulesFileTree = fileTree(dir: rootDir, include: "*/**/.lfrbuild-portal")
}
else {
	modulesFileTree = fileTree(rootDir) {
		exclude "**/bin/"
		exclude "**/tmp/"
		exclude "sdk/*/samples/"
		exclude "sdk/gradle-templates/classes/"
		exclude "sdk/gradle-templates/src/"
		exclude "util/*/samples/"

		include "*/**/build.gradle"

		if (!Boolean.getBoolean("modules.only.build")) {
			include "**/apps/foundation/frontend-theme/*/gulpfile.js"
			include "*/**/build.xml"
		}
	}
}

boolean noPortalBuild = Boolean.getBoolean("no.portal.build")

URI rootURI = rootDir.toURI()

modulesFileTree.each {
	if (noPortalBuild) {
		File portalBuildFile = new File(it.parentFile, ".lfrbuild-portal")

		if (portalBuildFile.exists()) {
			return
		}
	}

	String dirName = rootURI.relativize(it.parentFile.toURI())

	dirName = dirName[0 .. -2]
	dirName = dirName.replace("/" as char, ":" as char)

	include ":" + dirName
}

String testClassGroupIndex = System.getProperty("test.class.group.index")

if (testClassGroupIndex) {
	Properties properties = new Properties()

	File file = new File(rootDir, "../test.class.file.names.properties")

	properties.load(new StringReader(file.text.replace("\\", "/")))

	String testClassGroup = properties["TEST_CLASS_GROUP_" + testClassGroupIndex]
	String testClassGroups = properties["TEST_CLASS_GROUPS"]

	gradle.ext.testClasses = testClassGroup.tokenize(",")
	gradle.ext.testClassGroupIndex = testClassGroupIndex
	gradle.ext.testClassGroups = testClassGroups
}